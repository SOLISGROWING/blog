{
  
    
        "post0": {
            "title": "2022-01-14-algo-diary",
            "content": "백준 1431 시리얼번호 . n=int(input()) gitar=[] for i in range(n): temp=list(input()) t=[int(i) for i in temp if i.isdigit()] if len(t)==0: total=0 else: total=sum(t) gitar.append([len(temp),total,temp]) gitar=sorted(gitar) for g in gitar: ggg=[str(gg) for gg in g[2]] print(&#39;&#39;.join(ggg)) . 5 abcd 145c a a910 z321 a abcd z321 145c a910 . 백준 6198 옥상정원 . n=int(input()) result=0 q=[] for i in range(n): temp=int(input()) while q and q[-1]&lt;=temp: q.pop() result+=len(q) q.append(temp) print(result) . 6 10 3 7 4 12 2 5 .",
            "url": "https://solisgrowing.github.io/blog/2022/01/14/algo.html",
            "relUrl": "/2022/01/14/algo.html",
            "date": " • Jan 14, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "&#50724;&#45720;&#51032; &#50508;&#44256;&#47532;&#51608; 2021.12.21 . &#48708;&#48128;&#47700;&#45684; &#52636;&#52376; : https://softeer.ai/practice/info.do?eventIdx=1&amp;psProblemId=623&amp;sw_prbl_sbms_sn=37604 . n,m,k=map(int,input().split()) menu=list(map(str,input().split())) secret=list(map(str,input().split())) me=&#39;&#39;.join(menu) se=&#39;&#39;.join(secret) if me in se: print(&quot;secret&quot;) elif m&gt;n: print(&quot;normal&quot;) else: print(&quot;normal&quot;) . 3 10 5 1 4 5 3 3 1 2 4 1 4 5 1 4 secret . &#51648;&#50864;&#45716; &#49548;&#49688;&#47484; &#51339;&#50500;&#54644; https://softeer.ai/practice/info.do?eventIdx=1&amp;psProblemId=582&amp;sw_prbl_sbms_sn=16917 . from collections import deque import heapq import math def dijkstra(): heap_data = [] heapq.heappush(heap_data, (0, 1)) distance[1] = 0 while heap_data: dist, now = heapq.heappop(heap_data) if distance[now]!=dist: continue for i in adj[now]: nextv,nextc=i[0],i[1] temp=max(dist,nextc) if(temp&lt;distance[nextv]): distance[nextv]=temp heapq.heappush(heap_data,(temp,nextv)) n, m = map(int, input().split()) adj = [[] for _ in range(n + 1)] for _ in range(m): x, y, cost = map(int, input().split()) adj[x].append((y, cost)) adj[y].append((x, cost)) distance= [1e9] * (n + 1) dijkstra() while True: start=distance[n]+1 ok=1 for j in range(2,int(math.sqrt(start)+1)): if (start%j)==0: ok=0 break if ok: print(start) start+=1 . 10 13 1 2 5 1 3 1 1 4 2 2 5 5 3 5 4 3 6 1 4 6 1 4 7 3 5 8 5 6 9 4 7 9 2 8 10 5 9 10 3 . KeyboardInterrupt Traceback (most recent call last) /var/folders/x7/y2h8nj0j24vcwh0f3k6lwn5h0000gn/T/ipykernel_2688/1976121179.py in &lt;module&gt; 39 if ok: 40 print(start) &gt; 41 start+=1 42 43 KeyboardInterrupt: . n,m=map(int,input().split()) board=[] for i in range(n): temp=list(input()) for j in range(len(temp)): if temp[j]==&#39;R&#39;: rx=i ry=j elif temp[j]==&#39;B&#39;: bx=i by=j board.append(temp) q=[] dx=[1,0,-1,0] dy=[0,1,0,-1] q.append([rx,ry,bx,by,0]) visit=[[[[False for _ in range(10)] for _ in range(10)]for _ in range(10)] for _ in range(10)] visit[rx][ry][bx][by]=True def move(x,y,c,i): while(board[x+dx[i]][y+dy[i]]!=&#39;#&#39; and board[x][y]!=&#39;O&#39;): x+=dx[i] y+=dy[i] c+=1 return [x,y,c] flag=True while q: qq=q.pop() rx=qq[0] ry=qq[1] bx=qq[2] by=qq[3] d=qq[4] if d&gt;=10: break for i in range(4): nrx=rx nry=ry nbx=bx nby=by rc=0 bc=0 nd=d+1 temps=move(nrx,nry,rc,i) nrx=temps[0] nry=temps[1] rc=temps[2] temp2=move(nbx,nby,bc,i) nbx=temp2[0] nby=temp2[1] bc=temp2[2] if(board[nbx][nby]==&#39;O&#39;): continue if(board[nrx][nry]==&#39;O&#39;): if flag: print(nd) flag=False exit(0) break if(nrx==nbx and nry==nby): if (rc&gt;bc): nrx-=dx[i] nry-=dy[i] else: nbx-=dx[i] nby-=dy[i] if(visit[nrx][nry][nbx][nby]): continue visit[nrx][nry][nbx][nby]=True q.append([nrx,nry,nbx,nby,nd]) if flag: print(-1) . 10 10 ########## #R#...##B# #...#.##.# #####.##.# #......#.# #.######.# #.#....#.# #.#.##...# #O..#....# ########## 7 . board . NameError Traceback (most recent call last) /var/folders/x7/y2h8nj0j24vcwh0f3k6lwn5h0000gn/T/ipykernel_2779/396348846.py in &lt;module&gt; -&gt; 1 board NameError: name &#39;board&#39; is not defined . temps . [3, 1, 0] .",
            "url": "https://solisgrowing.github.io/blog/2021/12/21/My-First-Post.html",
            "relUrl": "/2021/12/21/My-First-Post.html",
            "date": " • Dec 21, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://solisgrowing.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://solisgrowing.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://solisgrowing.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://solisgrowing.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}